" Use vim-plug to manage plugins
call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'jxnblk/vim-mdx-js'
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'milkypostman/vim-togglelist'
Plug 'nanotech/jellybeans.vim'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdtree'
Plug 'skalnik/vim-vroom'
Plug 'tikhomirov/vim-glsl'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-unimpaired'
Plug 'w0rp/ale'

call plug#end()

" Load these plugins before the rest of .vimrc
runtime! plugin/sensible.vim
runtime! plugin/jellybeans.vim

" Map comma as the leader key
let mapleader=","
let maplocalleader=","

set colorcolumn=81                " Draw a vertical bar after 80 characters
set encoding=utf-8                " Use UTF-8 by default
set expandtab                     " Use spaces instead of tabs
set hlsearch                      " Highlight search matches
set ignorecase                    " Make searches case insensitive
set list                          " List invisible characters
set nobackup                      " Don't create backup files
set noswapfile                    " Don't create swap files
set nowrap                        " Don't wrap long lines
set number                        " Show line numbers
set numberwidth=3                 " Reduce the width of the line number column
set scrolloff=5                   " Scroll the buffer before reaching the end
set shiftwidth=2                  " Auto-indent using 2 spaces
set shortmess+=I                  " Hide the welcome message
set shortmess+=F                  " Hide file name from command line when opening
set smartcase                     " (Unless they contain a capital letter)
set splitright                    " Open vertical splits on the right
set splitbelow                    " Open horizontal splits below
set sts=2                         " Backspace deletes whole tabs at the end of a line
set t_Co=256                      " Use all 256 colours
set t_te=                         " Don't clear screen when suspending vim
set tabstop=2                     " A tab is two spaces long
set timeoutlen=300                " Leader key timeout is 300ms
set undodir=~/.vim/undo           " Store undo files in ~/.vim
set undofile                      " Persist undos between sessions
set wildmode=list:longest,full    " Autocompletion favours longer string

" Set status line to: filename [encoding,endings] [filetype] [modified]
set statusline=%f\ [%{strlen(&fenc)?&fenc:'none'},%{&ff}]\ %y\ %m

" Set status line for :Gstatus and :Gcommit
au FileType fugitive setlocal statusline=[staging\ changes]
au FileType gitcommit setlocal statusline=[committing\ changes]

" File types to ignore
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*/tmp/*
set wildignore+=*/.git/*,*/.rbx/*,*/.hg/*,*/.svn/*,*/.DS_Store
set wildignore+=*.swp,*~,._*

" Set file types for various extensions
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Procfile,*.ru,*.rake} set ft=ruby
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} set ft=markdown | set wrap
au BufRead,BufNewFile {*.json,.jshintrc,.eslintrc,*.pegjs} set ft=javascript

" Use the full window width for the quickfix list
au FileType qf wincmd J

" Quit the quickfix list with q
au FileType qf nmap <buffer> q :q<cr>

" Hide the character column in the quickfix list
au FileType qf setlocal colorcolumn=

" Make the quickfix statusline display the number of lines
au FileType qf setlocal statusline=[quickfix]\ [%L\ %{line('$')==1?'line':'lines'}]

" Remember last location in a file, unless it's a git commit message
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal! g`\"" | endif

" Make the :terminal feature a bit more consistent with regular Vim
tmap <C-n> <C-w>N
set shell=/bin/bash\ --login
au TerminalOpen * set nonumber
au TerminalOpen * set nolist
au TerminalOpen * set colorcolumn=
au TerminalOpen * setlocal statusline=[terminal]
au TerminalOpen * call feedkeys("\<c-w>N:echo\ni", 't')
au BufEnter * if &buftype == 'terminal' | call feedkeys("\<C-w>N", 't') | endif
au BufLeave * if &buftype == 'terminal' | silent! normal i | endif

" Strip trailing whitespace on write
function! <SID>StripTrailingWhitespace()
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespace()

" Use the jellybeans colorscheme with some tweaks
let g:jellybeans_background_color_256=0
silent! color jellybeans
hi Search ctermfg=black ctermbg=yellow cterm=NONE
hi IncSearch ctermfg=black ctermbg=yellow cterm=NONE
hi ColorColumn ctermbg=233
hi StatusLine ctermfg=white ctermbg=black
hi StatusLineNC ctermfg=240 ctermbg=black
hi StatusLineTerm ctermfg=white ctermbg=black
hi StatusLineTermNC ctermfg=240 ctermbg=black
hi TabLineFill ctermbg=234
hi TabLine ctermfg=240 ctermbg=234
hi TabLineSel ctermfg=white ctermbg=black
hi QuickFixLine ctermfg=white ctermbg=234 cterm=NONE
hi SignColumn ctermbg=black
hi GitGutterAdd ctermfg=35 ctermbg=black
hi GitGutterChange ctermfg=yellow ctermbg=black
hi GitGutterDelete ctermfg=124 ctermbg=black
hi GitGutterChangeDelete ctermfg=yellow ctermbg=black
hi ALEError ctermbg=235
hi ALEErrorSign ctermbg=52
hi ALEWarning ctermbg=235
hi ALEWarningSign ctermbg=17

" Set the signs that appear in the column when linting
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '>>'

" Show a larger number of matches in CtrlP
let g:ctrlp_max_height = 30

" Use git to speed up CtrlP file searches
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Use git to speed up global search
let g:ackprg = 'git grep -H --line-number --no-color'

" Highlight matches after a global search
let g:ackhighlight = 1

" Use NERDTree's minimal user interface
let g:NERDTreeMinimalUI=1

" Use NERDTree's minimal menu
let g:NERDTreeMinimalMenu=1

" Make the file drawer a little narrower than default
let g:NERDTreeWinSize=18

" Change file order so file2.txt is before file10.txt
let g:NERDTreeNaturalSort=1

" Automatically delete the buffer when the file is deleted
let g:NERDTreeAutoDeleteBuffer=1

" Set the status line to the name of the root directory
let g:NERDTreeStatusline="%=%{split(getcwd(),'/')[-1]}/"

" Move Rust's module/library file to the bottom of directory listings
let g:NERDTreeSortOrder=['\/$', '*', '\.swp$', '\.bak$', '\~$', 'mod.rs', 'lib.rs', 'test.rs']

" Reclaim two character spaces by hiding the arrows next to directories
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

" Bind <C-j> to move down the completion list
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"

" Bind <C-k> to move up the completion list
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" Disable ex mode
map Q <Nop>

" Disable the command window
nmap q: <Nop>
nmap q/ <Nop>
nmap q? <Nop>

" Disable showing the man page for word under the cursor.
map <S-k> <Nop>

" Bind <leader-h> to open a vertical split for help docs
nmap <leader>h :vertical :help<space>

" Bind nerdtree to leader-n
nmap <leader>n :NERDTreeToggle<cr>:echo<cr>

" Bind 'reveal' to leader-N
nmap <leader>N :NERDTreeFind<cr>

" Bind global search to leader-f
nmap <leader>f :set hlsearch<cr>:Ack!<space>

" Bind showing/hiding lint errors to =ol (in the spirit of vim-unimpaired)
nmap =ol :ALEToggle<cr>

" Bind showing/hiding git gutter to =og
nmap =og :GitGutterToggle<cr>

" Bind showing/hiding git blame to =ob
nmap =ob :Gblame<cr>

" Bind <leader-t> to open a terminal in a vertical split
nmap <leader>t :vertical :terminal<cr>

" Bind <leader-T> to open a terminal in a horizontal split
nmap <leader>T :terminal<cr>

" Bind <leader-w> to run cargo watch in a slightly smaller vertical split
nmap <leader>w :vertical :terminal<cr><C-n>:vertical resize -5<cr>icargo watch --shell 'clear && cargo test -- --quiet --test-threads=1'<cr>

nmap <leader>. :w<cr>:!touch ~/code/game/bin/dev_watch<cr><cr>
nmap <leader>p :e `./bin/edit_save --path`<cr>

" Bind <leader>g to mark the current position and switch to the Gstatus window
au FileType * nmap <buffer> <leader>g mG:above Gstatus<cr><C-w>p:wq<cr>:echo<cr>ggjj

" Bind <leader>g (in the Gstatus window) to switch to the Gcommit window
au FileType fugitive nmap <buffer> <leader>g :above Gcommit<cr><C-w>p:q<cr>:echo<cr>

" Bind <leader>g (in the Gcommit window) to commit and switch back to the mark
au FileType gitcommit nmap <buffer> <leader>g :above new<cr>'G<C-w>p:wq<cr><cr>:echo 'Committed changes.'<cr>

" Bind <leader>G (in the Gstatus window) to switch back to the mark
au FileType fugitive nmap <buffer> <leader>G :enew<cr>'G:echo<cr>

" Bind <leader>G (in the Gcommit window) to switch back to the mark
au FileType gitcommit nmap <buffer> <leader>G :enew<cr>'G:echo 'Cancelled.'<cr>
